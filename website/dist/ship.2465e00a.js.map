{"version":3,"sources":["../../game/static/scripts/ship.js"],"names":["makeShot","shipobj","spec","shootOne","shot","angle","speed_scale","extra_speed","invertY","bod","body","setScale","setActive","setVisible","x_vel","Math","cos","rotation","y_vel","sin","setVelocityX","velocity","x","setVelocityY","y","setDepth","shooter","texture","key","shots","badshots","goodshots","active","visible","vals","val","get","position","width","height","pi","pointsTo","x1","y1","x2","y2","inaccuracy","dir","pmath","Angle","Between","max","min","Normalize","rotateToPoint","ship","amt","target","ph","next","RotateTo","setRotation","setAngle","moveToPoint","rotamt","move","ai1","up","down","right","left","phase","Date","now","createTime","nonceTime","rotate","shs","ships","demoMode","demoShip","sh","shoot","ai2","undefined","targetShip","floor","random","xdist","ydist","dist","sqrt","pow","ai3","ptx","pty","ai4","off","offscreen","thisx","thisy","abs","ai5","burst","Ship","phship","scale","rot","vel_max","shotspeed","fire","acc","dec","max_vel","back","ang","xacc","PI","yacc","accel","decel","x_max","y_max","xvel","yvel","xvel1","yvel1","z","z2","xfunc","yfunc","newangle"],"mappings":"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","file":"ship.2465e00a.js","sourceRoot":"../src","sourcesContent":["\nfunction makeShot (shipobj, spec=false) {\n    function shootOne(shipobj, shot, angle, speed_scale, extra_speed, invertY=false) {\n        const bod = shipobj.body;\n        shot.setScale(0.7);\n        shot.setActive(true);\n        shot.setVisible(true);\n        const x_vel = Math.cos(shipobj.rotation + angle) * extra_speed;\n        const y_vel = sin(shipobj.rotation + angle) * extra_speed;\n        shot.setVelocityX(bod.velocity.x * speed_scale - x_vel);\n        shot.setVelocityY(bod.velocity.y * speed_scale - y_vel);\n        if (invertY) {\n            shot.setVelocityX(shot.body.velocity.x * -1);\n            shot.setVelocityY(shot.body.velocity.y * -1);\n        }\n        shot.setDepth(-1);\n        shot.shooter = shipobj.texture.key;\n    }\n\n\n    let shots = badshots\n    if (shipobj.texture.key === 'player1' || shipobj.texture.key === 'player2') {\n        shots = goodshots\n    }\n    const bod = shipobj.body;\n    if (shipobj.active && shipobj.visible){\n        if (!spec) {\n            let shot = shots.get(bod.position.x + shipobj.width/2, bod.position.y + shipobj.height/2);\n            if (shot) {\n                shootOne(shipobj, shot, (pi/2), 0.3, 600);\n            }\n        } else {\n            const vals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n            for (let val of vals) {\n                let shot = shots.get(bod.position.x + shipobj.width/2, bod.position.y + shipobj.height/2);\n                if (shot) {\n                    shootOne(shipobj, shot, ((val - 0.5) * (pi/16)), 0.1, 100, true);\n                }\n            }\n        }\n    }\n}\n\nfunction pointsTo(angle, x1, y1, x2, y2, inaccuracy=0.5) {\n    let dir = pmath.Angle.Between(x1, y1, x2, y2);\n    min = pmath.Angle.Normalize(angle - inaccuracy);\n    max = pmath.Angle.Normalize(angle + inaccuracy);\n    dir = pmath.Angle.Normalize(dir);\n    if (max - min < 0) {\n        let temp = min;\n        min = max;\n        max = min;\n    }\n    if (min < dir && max > dir) {\n        return true;\n    }\n    return false;\n}\n\nfunction rotateToPoint(ship, x, y, amt){\n    let target = pmath.Angle.Between(ship.ph.body.position.x, ship.ph.body.position.y, x, y);\n    let next = pmath.Angle.RotateTo(ship.ph.rotation, target, amt);\n    ship.ph.setRotation(next + pi/2);\n    ship.ph.setAngle((180/pi) * (next + pi/2));\n}\n\nfunction moveToPoint(ship, x, y, amt, max, rotamt) {\n    rotateToPoint(ship, x, y, rotamt);\n    ship.move(amt, 0, max, false);\n}\n\nfunction ai1(shot, spec, up, down, right, left) {\n    //lazy binding allows 'this' to refer to the enemy ships when used as their update method.\n    let phase = (Date.now() - this.createTime + this.nonceTime)/500;\n    //this.ph.setVelocityY(200);\n    //this.ph.setVelocityX(Math.cos(phase) * 200);\n    this.rotate(sin(phase - (pi/4)));\n    this.move(10, 3, 200, false);\n    let shs = ships;\n    if (demoMode) {\n        shs = [demoShip];\n    }\n    for (sh of shs) {\n        if (sh.ph.active && sh.ph.visible) {\n            if (pointsTo(this.ph.rotation - (pi/2), this.ph.body.position.x, this.ph.body.position.y, sh.ph.body.position.x, sh.ph.body.position.y, 0.1)) {\n                if (pmath.Between(0, 20000) < 300) {\n                    this.shoot(false);\n                }\n            }\n        }\n    }\n}\n\nfunction ai2(shot, spec, up, down, right, left) {\n    if (this.targetShip === undefined || this.targetShip.ph.active === false) {\n        this.targetShip = ships[Math.floor(Math.random(2))];\n        if (this.targetShip === undefined) {\n            this.targetShip = {\"ph\": {\"active\": false}};\n        }\n        return\n    }\n    let xdist = this.targetShip.ph.body.position.x - this.ph.body.position.x;\n    let ydist = this.targetShip.ph.body.position.y - this.ph.body.position.y;\n    let dist = Math.sqrt(Math.pow(xdist, 2) + Math.pow(ydist, 2));\n\n\n    rotateToPoint(this, this.targetShip.ph.body.position.x, this.targetShip.ph.body.position.y, 60);\n    if (dist > 100) {\n        moveToPoint(this, this.targetShip.ph.body.position.x, this.targetShip.ph.body.position.y, 2, 120, 60);\n        if (pmath.Between(0, 6000) > 5990) {\n            this.shoot(false);\n        }\n    } else if (dist < 80) {\n        this.move(5, 0, 100, true);\n    }\n}\nfunction ai3(shot, spec, up, down, right, left) {\n    if (this.ph.body.position.x === this.ptx && this.ph.body.position.y === this.pty) {\n        this.ptx = pmath.Between(100, 700);\n        this.pty = pmath.Between(100, 500);\n    }\n    moveToPoint(this, this.ptx, this.pty, 5, 400, 10);\n}\nfunction ai4(shot, spec, up, down, right, left) {\n    let xdist = this.targetShip.ph.body.position.x - this.ph.body.position.x;\n    let ydist = this.targetShip.ph.body.position.y - this.ph.body.position.y;\n    let dist = Math.sqrt(Math.pow(xdist, 2) + Math.pow(ydist, 2));\n    let off = offscreen(this.ph.body.position.x, this.ph.body.position.y);\n\n    if (this.targetShip.ph.active === false) {\n        this.targetShip = ships[Math.floor(Math.random(2))];\n        return\n    }\n    if ((dist < 300  || off) && this.ptx == null && this.pty == null) {\n        this.ptx = pmath.Between(100, 700);\n        this.pty = pmath.Between(100, 500);\n    }\n    if (dist < 300 || off) {\n        let thisx = this.ph.body.position.x;\n        let thisy = this.ph.body.position.y;\n        let xdist = Math.abs(thisx - this.ptx);\n        let ydist = Math.abs(thisy - this.pty);\n        if (xdist < 30 && ydist < 30) {\n            this.ptx = pmath.Between(100, 700);\n            this.pty = pmath.Between(100, 500);\n        }\n        moveToPoint(this, this.ptx, this.pty, 20, 300, 10);\n    }else{\n        this.ptx = null;\n        this.pty = null;\n        rotateToPoint(this, this.targetShip.ph.body.position.x, this.targetShip.ph.body.position.y, 10);\n        this.move(3, 2, 20, false);\n        if (pmath.Between(0, 6000) > 5990) {\n            this.shoot(false);\n        }\n    }\n}\n\nfunction ai5(shot, spec, up, down, right, left) {\n    if (this.targetShip.ph.active === false) {\n        this.targetShip = ships[Math.floor(Math.random(2))];\n        return\n    }\n\n    if (this.ptx && this.pty) {\n        moveToPoint(this, this.ptx, this.pty, 10, 400, 10);\n    }\n    let thisx = this.ph.body.position.x;\n    let thisy = this.ph.body.position.y;\n    let xdist = Math.abs(thisx - this.ptx);\n    let ydist = Math.abs(thisy - this.pty);\n    if (xdist < 30 && ydist < 30) {\n        this.ptx = false;\n        this.pty = false;\n    }\n    xdist = Math.abs(thisx - this.targetShip.ph.body.position.x);\n    ydist = Math.abs(thisy - this.targetShip.ph.body.position.y);\n    if (xdist >  300 && ydist > 300) {\n        let xdist = pmath.Between(-100, -50);\n        if (this.targetShip.ph.body.position.x - this.ptx < 0) {\n            xdist = pmath.Between(50, 100);\n        }\n        this.ptx = this.targetShip.ph.body.position.x + xdist;\n        this.pty = this.targetShip.ph.body.position.y;\n    }\n    if (!this.ptx || !this.pty) {\n        rotateToPoint(this, this.targetShip.ph.body.x, this.targetShip.ph.body.y, 10);\n        this.move(3, 0, 200, true);\n        this.burst = this.burst || 10;\n        if (this.burst < 10) {\n            this.shoot(false);\n            this.burst = this.burst + 1;\n        }\n        if (pmath.Between(0, 100000) < 300) {\n            this.burst = 1;\n        }\n    }\n}\n\nclass Ship { \n    constructor(phship, x, y, scale, rot) {\n        this.ph = phship;\n        this.scale = scale;\n        this.vel_max = 500;\n        this.shotspeed = 1000;\n        this.rotate(rot);\n    }\n\n    update(fire, spec, up=false, down=false, right=false, left=false) {\n\n        const acc = 10\n        const dec = 3\n\n        if (down) {\n            this.move(acc, dec, this.vel_max, true);\n        } else if (up) {\n            this.move(acc, dec, this.vel_max, false);\n        }\n\n        if (left) {\n            this.rotate(-5);\n        } else if (right) {\n            this.rotate(5);\n        }\n\n\n        if (fire || spec) {\n            this.shoot(spec);\n        }\n    }\n\n    move (acc=10, dec=3, max_vel=this.vel_max, back=false) {\n        // move forward or backwards (and decelerate)\n        const ang = this.ph.rotation;\n        const xacc = Math.cos(ang + (Math.PI/2)) * acc\n        const yacc = Math.sin(ang + (Math.PI/2)) * acc\n\n        const x_max = Math.cos(ang + (Math.PI/2)) * max_vel;\n        const y_max = Math.sin(ang + (Math.PI/2)) * max_vel;\n\n        if (back) {\n            this.accel(xacc, yacc, max_vel);\n        } else {\n            this.accel(-xacc, -yacc, max_vel);\n        }\n\n        this.decel(dec);\n    }\n\n    accel(x, y, max) {\n        let x_vel = this.ph.body.velocity.x + x + 0.000001;\n        let y_vel = this.ph.body.velocity.y + y + 0.000001;\n\n        let x_max = (x_vel * max) / Math.sqrt(Math.pow(x_vel, 2) + Math.pow(y_vel, 2))\n        let y_max = (y_vel * max) / Math.sqrt(Math.pow(x_vel, 2) + Math.pow(y_vel, 2))\n\n        if (Math.abs(x_max) < Math.abs(x_vel)) {\n            x_vel = x_max;\n        }\n        if (Math.abs(y_max) < Math.abs(y_vel)) {\n            y_vel = y_max;\n        }\n\n        this.ph.setVelocityX(x_vel);\n        this.ph.setVelocityY(y_vel);\n    }\n\n    decel(amt) {\n        let xvel = this.ph.body.velocity.x;\n        let yvel = this.ph.body.velocity.y;\n        const xvel1 = Math.abs(xvel) + 0.00001;\n        const yvel1 = Math.abs(yvel) + 0.00001;\n\n        const z = Math.sqrt(Math.pow(xvel1, 2) + Math.pow(yvel1, 2));\n        const z2 = Math.max(z - amt, 0);\n\n        const x2 = (z2 * xvel) / z;\n        const y2 = (z2 * yvel) / z;\n\n        let xfunc = Math.max;\n        let yfunc = Math.max;\n\n        if (xvel < 0) {\n            xfunc = Math.min;\n        }\n        if (yvel < 0) {\n            yfunc = Math.min;\n        }\n\n        xvel = xfunc(x2, 0);\n        yvel = yfunc(y2, 0);\n\n        this.ph.setVelocityX(xvel);\n        this.ph.setVelocityY(yvel);\n    }\n\n    rotate(angle) {\n        let newangle = this.ph.angle + angle;\n\n        if (newangle > 180) {\n            newangle = newangle - 360;\n        }\n\n        if (newangle < -180) {\n            newangle = newangle + 360;\n        }\n        this.ph.setAngle(newangle);\n        newangle = (newangle/180) * Math.PI //radian conversion\n        this.ph.setRotation(newangle);\n\n    }\n\n\n    scale(scale) {\n\n    }\n\n    shoot(spec=false) {\n        if (!spec) {\n            makeShot(this.ph);\n        } else {\n            makeShot(this.ph, spec);\n        }\n    }\n}\n"]}