{"version":3,"sources":["../../game/static/scripts/title.js"],"names":["Scene","demoBadShips","demoMode","title","demoShip","demoEnemies","topScore","scoreText","TitleScene","Phaser","ship","shot","blast","blasts","get","body","position","x","y","setActive","setVisible","play","setPosition","setVelocity","setTimeout","texture","key","two_player","pmath","Between","load","image","atlas","text","sky","add","tileSprite","setDepth","toString","fontSize","fill","physics","sprite","setBounce","setCollideWorldBounds","Ship","update","ai2","anims","create","frames","group","defaultKey","maxSize","goodshots","badshots","collider","ph","bulletHit","time","addEvent","delay","callback","randx","setAngle","setRotation","pi","undefined","casing","enemy","children","each","fellow","bind","ai1","createTime","Date","now","nonceTime","push","callbackScope","loop","tilePositionY","kb","spec","input","keyboard","addKey","Input","Keyboard","KeyCodes","ENTER","isDown","normal_mode","scene","start","filter","item","active","targetShip","Math","floor","random","length","shoot","offscreen"],"mappings":"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","file":"title.f33fdfd0.js","sourceRoot":"../src","sourcesContent":["var demoShip = null;\nvar demoBadShips;\nvar demoEnemies = [];\nvar demoMode;\nvar title;\nvar topScore = 0;\nvar scoreText = '';\n\nclass TitleScene extends Phaser.Scene {\n\n    bulletHit (ship, shot) {\n        let blast = blasts.get(shot.body.position.x, shot.body.position.y);\n        blast.setActive(true);\n        blast.setVisible(true);\n        blast.play('blast');\n        shot.setPosition(-100, -100);\n        shot.setVelocity(0,0);\n        shot.setActive(false);\n        shot.setVisible(false);\n\n        ship.setPosition(-200, 0);\n        ship.setVelocity(0, 0);\n        ship.setActive(false);\n        ship.setVisible(false);\n\n        setTimeout(function () {\n            blast.setActive(false);\n            blast.setVisible(false);\n            blast.setPosition(-100, -100);\n        }, 1000);\n\n        if (ship.texture.key == 'player1' || (ship.texture.key == 'player2' && two_player)) {\n            setTimeout(function () {\n                ship.setActive(true);\n                ship.setVisible(true);\n                ship.setPosition(pmath.Between(200, 600), pmath.Between(200, 400));\n                ship.setVelocity(0, 0);\n            }, 1000);\n        }\n    }\n\n    constructor ()\n    {\n        super('TitleScene');\n    }\n\n\n    preload ()\n    {\n\n        this.load.image('sky', 'static/assets/images/starbgv.png');\n        this.load.image('player1', 'static/assets/images/blueship.png');\n        this.load.image('player2', 'static/assets/images/blueship2.png');\n        this.load.image('player3', 'static/assets/images/orangeship.png');\n        this.load.atlas('shapes', 'static/assets/images/shapes.png', 'static/assets/images/shapes.json');\n        this.load.text('space_dirt', 'static/assets/images/space_dirt.json');\n        this.load.image('goodshot', 'static/assets/images/goodshot.png');\n        this.load.image('badshot', 'static/assets/images/badshot.png');\n        this.load.image('blast1', 'static/assets/images/blast1.png');\n        this.load.image('blast2', 'static/assets/images/blast2.png');\n        this.load.image('blast3', 'static/assets/images/blast3.png');\n        this.load.image('blast4', 'static/assets/images/blast4.png');\n        this.load.image('blast5', 'static/assets/images/blast5.png');\n        this.load.image('blast6', 'static/assets/images/blast6.png');\n        this.load.image('title', 'static/assets/images/RocketTitle.png');\n\n        this.load.image('null', 'static/assets/images/null.png');\n    }\n\n\n\n    create ()\n    {\n        demoMode = true;\n        sky = this.add.tileSprite(400, 300, 800, 600, 'sky');\n        sky.setDepth(-999);\n        scoreText = this.add.text(16, 16, 'High Score: ' + topScore.toString(), { fontSize: '32px', fill: '#a66f3c' });\n        title = this.add.tileSprite(400, 300, 800, 600, 'title');\n        title.setDepth(999);\n        //dirt1 = this.add.particles('shapes',  new Function('return ' + this.cache.text.get('space_dirt'))());\n        //dirt1.setDepth(-999);\n\n        let ship = this.physics.add.sprite(100, 500, 'player1');\n        ship.setBounce(0.2);\n        ship.setCollideWorldBounds(true);\n        demoShip = ship;\n\n\n        demoShip = new Ship(demoShip, 100, 500, 1, 0);\n        demoShip.update = ai2;\n\n        this.anims.create({\n            key: 'blast',\n            frames: [\n                { key: 'blast1' },\n                { key: 'blast2' },\n                { key: 'blast3' },\n                { key: 'blast4' },\n                { key: 'blast5' },\n                { key: 'blast6' },\n                { key: 'null' },\n            ]\n        })\n\n        blasts = this.physics.add.group({\n            defaultKey: 'blast1',\n            maxSize: 200\n        })\n\n        goodshots = this.physics.add.group({\n            defaultKey: 'goodshot',\n            maxSize: 200\n        });\n\n        badshots = this.physics.add.group({\n            defaultKey: 'badshot',\n            maxSize: 200\n        });\n\n        demoBadShips = this.physics.add.group({\n            defaultKey: 'player3',\n            maxSize: 20\n        });\n\n        this.physics.add.collider(demoShip.ph, badshots, this.bulletHit, null, this);\n\n        //enemy spawn timer\n        this.time.addEvent({\n            delay: 500,\n            callback: function() {\n                if (demoMode) {\n                    let randx = pmath.Between(200, 600);\n                    let ship = demoBadShips.get(randx, -100); //this.physics.add.sprite(pmath.Between(0, 800), -100, 'player3');\n                    ship.setBounce(0.6);\n                    ship.setAngle(180)\n                    ship.setRotation(pi)\n                    if (ship.casing === undefined) { //if not created already\n                        let enemy = new Ship(ship, ship.body.position.x, ship.body.position.y, 1, 0);\n                        this.physics.add.collider(demoShip.ph, ship, null, null, this);\n                        this.physics.add.collider(ship, goodshots, this.bulletHit, null, this);\n                        demoBadShips.children.each(function (fellow) {\n                            this.physics.add.collider(ship, fellow, null, null, this);\n                        }.bind(this));\n                        enemy.update = ai1;\n                        ship.casing = enemy; //just to keep track of having been created already\n                    }\n                    ship.setActive(true);\n                    ship.setVisible(true);\n                    ship.casing.createTime = Date.now();\n                    ship.casing.nonceTime = pmath.Between(0, 6000);\n                    //enemy.update = ai2;\n                    //enemy.targetShip = ships[Math.floor(Math.random() * 2)];\n                    //enemy.ptx = pmath.Between(100, 700);\n                    //enemy.pty = pmath.Between(100, 500);\n                    //enemy.update = ai3;\n                    //enemy.update = ai4;\n                    demoEnemies.push(ship.casing);\n                }\n            },\n            callbackScope: this,\n            loop: true\n        });\n\n    }\n\n\n\n\n    update ()\n    {\n        // move sky\n        sky.tilePositionY = sky.tilePositionY - 1;\n\n        // get the movement for ship1\n        const kb = this.input.keyboard;\n        let spec =  kb.addKey(Phaser.Input.Keyboard.KeyCodes.ENTER).isDown;\n        if (spec) {\n            spec = false;\n            demoShip.update = function () {};\n            demoShip.ph.setActive(false);\n            demoShip.ph.setVisible(false);\n            demoMode = false;\n            normal_mode = true;\n            //load next scene\n            this.scene.start('MainScene');\n        }\n        demoEnemies = demoEnemies.filter(function (item) {\n            return item.ph.active && item.ph.body.position.y < 550;\n        });\n\n        //update the demoShip\n        if (demoShip.targetShip === undefined || !demoShip.targetShip.ph.active || demoShip.targetShip.ph.body.position.y < -20 || demoShip.targetShip.ph.body.position.y > 500) {\n            demoShip.targetShip = demoEnemies[Math.floor(Math.random(demoEnemies.length))];\n        }\n        demoShip.update(false, false, false, false, false, false);\n        if (pmath.Between(0, 1000) < 30 && demoShip.targetShip.ph.body && demoShip.targetShip.ph.body.position.y > 0) {\n            demoShip.shoot(false);\n        }\n        if (pmath.Between(0, 1000000) < 500 && demoShip.ph.active){\n            demoShip.shoot(true);\n        }\n\n\n        // update and destroy enemies\n        demoBadShips.children.each(function (enemy) {\n            if (enemy.active) {\n                enemy.casing.update(false, false, false, false, false, false);\n                if (offscreen(enemy.body.position.x, enemy.body.position.y)) {\n                    enemy.setActive(false);\n                    enemy.setVisible(false);\n                    enemy.setVelocity(0, 0);\n                }\n            }\n        }.bind(this));\n\n        //destroy bullets out of range\n        goodshots.children.each(function (shot) {\n            if (shot.active) {\n                if (offscreen(shot.x, shot.y)) {\n                    shot.setActive(false);\n                    shot.setVisible(false);\n                }\n            }\n        }.bind(this));\n\n        //destroy bullets out of range\n        badshots.children.each(function (shot) {\n            if (shot.active) {\n                if (offscreen(shot.x, shot.y)) {\n                    shot.setActive(false);\n                    shot.setVisible(false);\n                }\n            }\n        }.bind(this));\n\n    }\n}\n\n\n\n"]}